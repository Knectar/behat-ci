<?php

namespace AppBundle\Commands;

use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Formatter\OutputFormatterStyle;
use Symfony\Component\Yaml\Parser;
use Symfony\Component\Yaml\Exception\ParseException;
use Symfony\Component\Yaml\Dumper;

class Trigger extends Schedule {

    //configuration of the command's name, arguments, options, etc
    protected function configure()
    {
      $this->setName('trigger')
           ->setDescription("Reads from bhqueue.txt and runs behat tests and specified by the .yml config file generated by the schedule command");
    }

    //executes code when command is called
    protected function execute(InputInterface $input, OutputInterface $output)
    {
      $this->getLogger()->debug('Trigger called');
      $this->formatOutput($output);

      try {
        //read queue location from settings.yml
        $config = $this->getYamlParser()->parse(file_get_contents(dirname(__FILE__) . '/../../../settings.yml'));
        $bhQ = $config['locations']['queue'];
      } catch (ParseException $e) {
          printf("Unable to parse the YAML string: %s", $e->getMessage());
          return false;
      }
      //Check if there are tests scheduled, i.e., queue file is not empty
      if (file_get_contents($bhQ.'.txt') != ''){
        $projectList = $this->readQueue($bhQ.'.txt');
        //Removed scheduled tests from queue
        file_put_contents($bhQ.'.txt', "");
        foreach($projectList as $p => $e){
          if($e == 'all'){
              //generates/runs tests for both dev and prod
              $this->bhTrigger($p, 'dev', NULL, $output);
              $this->bhTrigger($p, 'production', NULL, $output);
          }else{
              $this->bhTrigger($p, $e, NULL, $output);
          }
        }
        return true;
      }

    }

    //Forms a map array of projects => environments from the queue by parsing each line of the queue string
    protected function readQueue($queue)
    {
      $projectYmlList = array();
      $file = fopen($bhQ.'.txt', "r") or exit("Unable to open file!");
      while(!feof($file)){
        $lineinQueue = fgets($file);
        //Grab the project .yml file name in isolation from bhqueue and its associated environments
        $pStringOffsetEnd = strrpos($lineinQueue, "_");
        $projectName = substr($lineinQueue,  5, $pStringOffsetEnd-strlen($lineinQueue));
        $environmentName = substr($lineinQueue, $pStringOffsetEnd + 1, strrpos($lineinQueue, ".yml") - $pStringOffsetEnd -1);
        //add the project name to the array (if we haven't already,there could be multiple pushes per minute)
        if(!in_array($projectName, $projectYmlList) && strlen($projectName)>0){
          echo($projectName.' and '.$environmentName);
          $projectYmlList[$projectName] = $environmentName;
        }
      }
      fclose($file);
      return $projectYmlList;
    }

    //Generates a yml configuration using projects.yml and profiles.yml file given a project and environment
    protected function bhTrigger($project, $env, $profile, OutputInterface $output, $test=true)
    {
      //Read in profiles.yml and projects.yml as arrays
      //Find the location of the .yml files and parse them as strings. Configs in home directory will overwrite any global configs in /etc/
      if(!file_exists('/etc/behat-ci')){
        $this->getLogger()->debug('Creating directory etc/behat-ci/');
        $this->getLogger()->debug(shell_exec('mkdir -p /etc/behat-ci/'));
      }

      try {
        $projectsLocation = $this->getLocation($this->getYamlParser(), 'projects.yml');
        $profilesLocation = $this->getLocation($this->getYamlParser(), 'profiles.yml');
        $projects = $this->getYamlParser()->parse(file_get_contents($projectsLocation));
        $profiles = $this->getYamlParser()->parse(file_get_contents($profilesLocation));
      } catch (ParseException $e) {
          $this->getLogger()->error("Unable to parse the YAML string: %s");
          printf("Unable to parse the YAML string: %s", $e->getMessage());
      }
      //Generate the .yml config and run the tests
      $this->generate($project, $env, $profile, $profiles, $projects, $output, $test);

    }


    protected function test($project, $env, $profile, $profileList, $output)
    {
      $behatLocation = $this->getLocation($this->getYamlParser(), 'behat');
      //Run the behat testing command.
      echo shell_exec($behatLocation.'/behat -c /tmp/'.$project.'_'.$env.'.yml');
      $this->getLogger()->info(shell_exec($behatLocation.'/behat -c /tmp/'.$project.'_'.$env.'.yml'));
      //Run test on a single profile if specified
      if($profile){
          $this->getLogger()->info('Running tests on '.$r.' for '.$project);
          if(!shell_exec($behatLocation.'/behat -c /tmp/'.$project.'_'.$env.'.yml -p '.$profile.' --format failed')){
            $output->writeln('<error>'.$profile.' is not a valid profile.</error>');
            $this->getLogger()->error($profile.' is not a valid profile.');
          }
      } else { //else run all the profiles
        foreach($profileList as $r){
          $this->getLogger()->info('Running tests on '.$r.' for '.$project.'...');
          $this->getLogger()->info(shell_exec($behatLocation.'/behat -c /tmp/'.$project.'_'.$env.'.yml -p '.$r.' --format failed'));
        }
      }
      //Remove the file after tests have been run
      shell_exec('rm /tmp/'.$project.'_'.$env.'.yml');
    }


  }
